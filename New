
public class Solution {

    public static void main(String [] args) {
        ListNode l1 = new ListNode();
        l1.add(9);
        l1.add(9);
        l1.add(9);
        l1.add(9);
        l1.add(9);
        l1.add(9);
        l1.add(9);
        ListNode l2 = new ListNode();
        l2.add(9);
        l2.add(9);
        l2.add(9);
        l2.add(9);


        int sum = getReversed(l1) + getReversed(l2);

        ListNode result = splitIntoNodes(sum);
        ListNode current = result;
        while(true) {
            if (current == null) {
                System.out.println("Result is null");
                break;
            } else {
                System.out.print(current.val+",");
                if (current.next == null) {
                    break;
                }
            }
            current = current.next;
        }
    }

    public static int getReversed(ListNode node) {
        return getReverseNodeSum(node, 1);
    }

    private static int getReverseNodeSum(ListNode node, int n) {
        if (node == null) {
            return 0;
        }
        return (node.val*n) + getReverseNodeSum(node.next, n*10);
    }

    public static ListNode splitIntoNodes(int sum) {
        ListNode result = new ListNode();
        ListNode current = result;
        while(true) {
            if (sum/10 != 0) {
                current.val = sum%10;
                current.next = new ListNode();
                current = current.next;
            } else {
                current.val = sum%10;
                break;
            }
            sum = sum/10;
        }
        return result;
    }

}

class ListNode {
    int val = -1;
    ListNode next;

    void add(int val) {
        if (this.val == -1) {
            this.val = val;
        } else {
            ListNode current = this;
            while(current.next != null) {
                current = current.next;
            }
            current.next = new ListNode(val);
        }
    }

    ListNode() {}

    ListNode(int val) {
        this.val = val;
    }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}
