public class TwitterAccount extends Contact {

    private String username;

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}

public class Birthday extends PersonalInfo {

    private int day;
    private int month;
    private int year;

    public int getDay() {
        return day;
    }

    public OperationResult setDay(int day) {
        if (month==1 || month==3) {
            if (day > 0 && day <= 31) {
                this.day = day;
            } else {
                return new OperationResult(false, "day value is incorrect, should be less then 31");
            }
        } else if (month==2) {
            if (day > 0 && day < 28) {
                this.day = day;
            } {
                return new OperationResult(false, "day value is incorrect, should be less then 28");
            }
        }
        //TODO закончить проверку остальных месяцев
        return new OperationResult(true, null);
    }

    public int getMonth() {
        return month;
    }

    public OperationResult setMonth(int month) {
        if (month > 0 && month < 13) {
            this.month = month;
        } else {
            return new OperationResult(false, "month should be between 1 and 12");
        }
        return new OperationResult(true, null);
    }

    public int getYear() {
        return year;
    }

    public OperationResult setYear(int year) {
        if (year > 0) {
            this.year = year;
        } else {
            return new OperationResult(false, "year should be positive number")
        }
        return new OperationResult(true, null);
    }

    @Override
    public String getPersonInfoAsString() {
        return getDay() + "/" + getMonth() + "/" + getYear();
    }
}


public class TelBook {

    private String owner;
    private Page[] pages = new Page[10];
    private int lastEmptyPageIndex = 0;

    public OperationResult add(Page page) {

        if (page == null) {
            return new OperationResult(false, "page is null");
        } else if (page.getPerson() == null) {
            return new OperationResult(false, "person cannot be null");
        }

        OperationResult operationResult = page.setPageNumber(lastEmptyPageIndex);

        if (!operationResult.getSuccess()) {
            return operationResult;
        }

        pages[lastEmptyPageIndex] = page;
        lastEmptyPageIndex++;

        return new OperationResult(true, null);
    }

    public String getOwner() {
        return owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public Page[] getPages() {
        //TODO Homework 5: return only not empty pages
        return pages;
    }

    public OperationResult setPages(Page[] pages) {

        if (pages == null || pages.length == 0) {
            return new OperationResult(false, "cannot set empty list of pages");
        }

        this.pages = pages;

        return new OperationResult(true, null);
    }

    public int getLastEmptyPageIndex() {
        return lastEmptyPageIndex;
    }

    public void setLastEmptyPageIndex(int lastEmptyPageIndex) {
        this.lastEmptyPageIndex = lastEmptyPageIndex;
    }
}


public class InstagramAccount extends Contact { //TODO Homework: к какому классу относится этот класс? От какого класса он должен расширяться от Contact или от PersonalInfo
}


public class Gender extends PersonalInfo {

    private String type; //w, m

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }
}


public class Education extends PersonalInfo {
	//TODO Homework
}


public class Name extends PersonalInfo {

    private String firstname;
    private String surname;
    private String paternal;
    private String maternal;
    private String prefix; //Mr, Mrs, Bey, Aga, Professor

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getSurname() {
        return surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getPaternal() {
        return paternal;
    }

    public void setPaternal(String paternal) {
        this.paternal = paternal;
    }

    public String getMaternal() {
        return maternal;
    }

    public void setMaternal(String maternal) {
        this.maternal = maternal;
    }

    public String getPrefix() {
        return prefix;
    }

    public void setPrefix(String prefix) {
        this.prefix = prefix;
    }
}


public class Person {

    private PersonalInfo[] personalInfos = new PersonalInfo[10];
    private int lastFreeCellInPersonalInfos = 0;

    private Contact[] contacts = new Contact[10];
    private int lastFreeCellInContacts = 0;

    public PersonalInfo[] getPersonalInfos() {
        return personalInfos;
    }

    public void setPersonalInfos(PersonalInfo[] personalInfos) {
        this.personalInfos = personalInfos;
    }

    public Contact[] getContacts() {
        return contacts;
    }

    public void setContacts(Contact[] contacts) {
        this.contacts = contacts;
    }

    public OperationResult addPersonalInfo(PersonalInfo personalInfo) {

        if (personalInfos.length == lastFreeCellInPersonalInfos - 1) {
            return new OperationResult(false, "array is full, not enough space");
        }

        personalInfos[lastFreeCellInPersonalInfos] = personalInfo;
        lastFreeCellInPersonalInfos++;

        return new OperationResult(true, null);
    }

    public void addContact(Contact contact) {
        contacts[lastFreeCellInContacts] = contact;
        lastFreeCellInContacts++;
    }
}


public class FacebookAccount extends Contact {

    private String username;

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}


public abstract class Contact {
	public abstract String getContactAsString();
}


public class Email extends Contact {

    private String username; //maxim.semenov
    private String mailProvider; //gmail.com

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getMailProvider() {
        return mailProvider;
    }

    public void setMailProvider(String mailProvider) {
        this.mailProvider = mailProvider;
    }
}


public class Profession extends PersonalInfo {

    private String professionGroup; //medical
    private String professionName; //dentist

    public String getProfessionGroup() {
        return professionGroup;
    }

    public void setProfessionGroup(String professionGroup) {
        this.professionGroup = professionGroup;
    }

    public String getProfessionName() {
        return professionName;
    }

    public void setProfessionName(String professionName) {
        this.professionName = professionName;
    }
}


public class OperationResult {
	private Boolean isSuccess;
	private String errorMsg;

	public OperationResult(Boolean isSuccess, String errorMsg) {
		this.isSuccess = isSuccess;
		this.errorMsg = errorMsg;
	}

	public Boolean getSuccess() {
		return isSuccess;
	}

	public void setSuccess(Boolean success) {
		isSuccess = success;
	}

	public String getErrorMsg() {
		return errorMsg;
	}

	public void setErrorMsg(String errorMsg) {
		this.errorMsg = errorMsg;
	}
}

public class MobilePhone extends Contact {

    private String countryCode; //+7, +0, +1...
    private String msisdn; //7015657645

    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public String getMsisdn() {
        return msisdn;
    }

    public void setMsisdn(String msisdn) {
        this.msisdn = msisdn;
    }

    @Override
    public String getContactAsString() {
        return getCountryCode() + " " + getMsisdn();
    }
}


public class Page {

    private int pageNumber;
    private Person person;

    public Page(Person person, OperationResult operationResult) {
        operationResult = this.setPerson(person);
    }

    public int getPageNumber() {
        return pageNumber;
    }

    public OperationResult setPageNumber(int pageNumber) {

        if (pageNumber < 0) {
            return new OperationResult(false, "page number cannot be less then 0");
        }

        this.pageNumber = pageNumber;

        return new OperationResult(true, null);
    }

    public Person getPerson() {
        return person;
    }

    public OperationResult setPerson(Person person) {

        if (person.getPersonalInfos() == null || person.getPersonalInfos().length == 0) {
            return new OperationResult(false, "personal info cannot be null");
        }

        this.person = person;

        return new OperationResult(true, null);
    }
}

public abstract class PersonalInfo {
	public abstract String getPersonInfoAsString();
}


import java.util.Scanner;

public class TelephoneBookApplication {

    public static void main(String[] args) {

        System.out.println("Hello this is my phonebook");

        Scanner scanner = new Scanner(System.in);

        TelBook telBook = new TelBook();

        while (true) {

            System.out.println("Menu: ");
            System.out.println("1 - Add page;");
            System.out.println("2 - Delete page;");
            System.out.println("3 - Show all pages;");
            System.out.println("4 - Update page;");

            System.out.println("Enter option: ");
            int optionSelected = scanner.nextInt();

            if (optionSelected == 1) {

                Person person = new Person();

                while (true) {

                    System.out.println("Select info to fill: ");
                    System.out.println("(tel) Fill mobile phone");
                    System.out.println("(name) Fill name");
                    System.out.println("(birthday) Fill birthday");
                    System.out.println("(twitter) Fill twitter account");
                    System.out.println("(done) Exit this menu");

                    String infoType = scanner.next();

                    //TODO Homework 5: закончить все сеттеры для всех методов, все сеттеры должны возвращать объект типа OperationResult

                    if (infoType.equals("tel")) {

                        MobilePhone mobilePhone = new MobilePhone();

                        System.out.println("-Mobile phone-");
                        System.out.println("country code:");
                        tellMeIfError(mobilePhone.setCountryCode(scanner.next()));
                        System.out.println("msisdn:");
                        tellMeIfError(mobilePhone.setMsisdn(scanner.next()));

                        tellMeIfError(person.addContact(mobilePhone));

                    } else if (infoType.equals("name")) {

                        Name name = new Name();

                        System.out.println("-Name-");
                        System.out.println("firstname:");
                        tellMeIfError(name.setFirstname(scanner.next()));
                        System.out.println("surname:");
                        tellMeIfError(name.setSurname(scanner.next()));
                        System.out.println("paternalname:");
                        tellMeIfError(name.setPaternal(scanner.next()));
                        System.out.println("maternalname:");
                        tellMeIfError(name.setMaternal(scanner.next()));
                        System.out.println("prefix:");
                        tellMeIfError(name.setPrefix(scanner.next()));

                        tellMeIfError(person.addPersonalInfo(name));

                    } else if (infoType.equals("birthday")) {

                        Birthday birthday = new Birthday();

                        System.out.println("-Birthday-");
                        System.out.println("day:");
                        tellMeIfError(birthday.setDay(scanner.nextInt()));
                        System.out.println("month:");
                        tellMeIfError(birthday.setMonth(scanner.nextInt()));
                        System.out.println("year:");
                        tellMeIfError(birthday.setYear(scanner.nextInt()));

                        tellMeIfError(person.addPersonalInfo(birthday));

                    } else if (infoType.equals("twitter")) {

                        TwitterAccount twitter = new TwitterAccount();

                        System.out.println("-Twitter-");
                        System.out.println("username:");
                        tellMeIfError(twitter.setUsername(scanner.next()));

                        tellMeIfError(person.addContact(twitter));

//                    } else if (...) { // TODO Homework: добавить все оставшиеся варианты объектов контактов и личных данных (не забыть про новые классы Education & InstagramAccount)
//                    } else if (...) { // TODO Homework: добавить все оставшиеся варианты объектов контактов и личных данных (не забыть про новые классы Education & InstagramAccount)
                    } else if (infoType.equals("done")) {
                        break;
                    }
                }

                OperationResult operationResult = null;
                Page page = new Page(person, operationResult);

                if (operationResult.getSuccess() == false) {
                    System.err.println(operationResult.getErrorMsg());
                }

                operationResult = telBook.add(page);

                if (operationResult.getSuccess()) {
                    System.err.println(operationResult.getErrorMsg());
                }

            } else if (optionSelected == 3) {
                printPages(telBook.getPages());
            } else if (optionSelected == 4) {
                //TODO Homework Update Page
                //...
                telBook.update(page);
            } else if (optionSelected == 5) {
                //TODO Homework Delete Page
                //...
                telBook.delete(pageIndex);
            } else if (optionSelected == 6) {
                //TODO Homework Search Page
                //...
                Page[] foundPages = telBook.search(keyWord);
                printPages(foundPages);
            }
        }

    }

    private static void printPages(Page[] pages) {
        int i = 0;

        while (i < pages.length) {

            Person person = pages[i].getPerson();

            System.out.println("TelBook current page number#: " + pages[i].getPageNumber());

            for (int j = 0; j < person.getContacts().length; j++) {
                System.out.println(person.getContacts()[j].getContactAsString());
            }

            for (int j = 0; j < person.getPersonalInfos().length; j++) {
                System.out.println(person.getPersonalInfos()[j].getPersonInfoAsString());
            }

            i++;
        }
    }

    private static void tellMeIfError(OperationResult operationResult) {
        if (operationResult.getSuccess() == false) {
            System.err.println(operationResult.getErrorMsg());
        }
    }

}


